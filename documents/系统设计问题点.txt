从代码和设计的角度来看有：
由不合理的代码所引起的项目无扩展性
数据库经常发生死锁
数据库事务乱用，导致事务占用时间过长
代码容错能力很差，经常因为考虑不足引起事故
程序中打印的大量的无用日志，并且引起性能问题
常用配置信息依然从数据库中读取
滥用线程池，造成栈和堆溢出
从库中查询数据，每次全部查出
业务代码研发不考虑幂等操作
使用缓存不合理，存在惊群效应、缓存穿透等情况
代码上下流流程定义混乱
异常处理机制混乱


再从整体架构角度来看：
整体依然使用单体集群架构
采用单机房服务器布署方式
采用 Nginx+hessian 的方式实现服务化
业务架构划分不彻底，边界模糊
项目拆分不彻底，一个 Tomcat 共用多个应用
无故障降级策略
监控系统不合理（网络、系统）
支付运营报表，大数据量查询
运维手动打包，手动上线
系统扩容手动布署



分布式领域CAP理论，
Consistency(一致性), 数据一致更新，所有数据变动都是同步的
Availability(可用性), 好的响应性能
Partition tolerance(分区容忍性) 可靠性

定理：任何分布式系统只可同时满足二点，没法三者兼顾。
忠告：架构师不要将精力浪费在如何设计能满足三者的完美分布式系统，而是应该进行取舍。

DDD:
https://www.cnblogs.com/Leo_wl/p/3866629.html